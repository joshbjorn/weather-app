{"version":3,"sources":["components/SearchBar.js","components/WeatherDisplay.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","location","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","props","getWeather","className","onSubmit","this","type","onChange","Component","WeatherDisplay","currentForecast","tempUnitConverter","tempUnit","country","city","description","alt","src","icon","temperature","humidity","wind","onClick","App","a","fetch","mode","response","json","weather","cod","processWeather","console","log","sys","name","Math","round","main","temp","speed","JSON","parse","stringify","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.279dd110.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../index.css'\n\nclass SearchBar extends Component {\n    state = {\n        location: \"\"\n    }\n\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id]: e.target.value,\n        });\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.getWeather(this.state.location);\n    }\n\n    render(){\n        return (\n            <div>\n                <form id=\"form\" className=\"valign-wrapper\" onSubmit={this.handleSubmit}>\n                    <input id=\"form-input\" type=\"text\" onChange={this.handleChange} id=\"location\" name=\"location\" placeholder=\"Enter a city or country here\"/> \n                    <button className=\"btn-flat\"><i id=\"search-button\" className=\"material-icons\">search</i></button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default SearchBar","import React from 'react'\n\nconst WeatherDisplay = ({ currentForecast, tempUnitConverter, tempUnit }) => {\n    const handleClick = () => {\n        tempUnitConverter();\n    }\n    return(\n            <div id=\"weather-card\" className=\"card container\">\n                <div id=\"location\" className=\"row indigo grey lighten-1\">\n                    <header className=\"col s12 m6\">\n                        <div>\n                            <h1>{currentForecast.country}, {currentForecast.city}</h1>\n                            <p>{currentForecast.description}</p>\n                        </div>\n                    </header>\n                    <figure className=\"col s12 m6\"> \n                        <img id=\"weather-icon-img\" alt=\"#\" src={currentForecast.icon}  />\n                    </figure>\n                </div>\n                <div id=\"temp-details\" className=\"row blue-grey darken-1\">    \n                    <div id=\"temperature\"  className=\"col s12\">\n                        {currentForecast.temperature}\n                        {tempUnit}\n                    </div>\n                    <div id=\"details\" className=\"col s12\">\n                        <p>Humidity: {currentForecast.humidity}</p>\n                        <p>Wind: {currentForecast.wind}</p>\n                    </div>\n                </div>\n                <div id=\"temp-unit-row\" className=\"row s12 center-align indigo grey lighten-1\">\n                    <button id=\"temperature-button\" className=\"btn-flat waves-effect waves-light btn col s12\" onClick={() => handleClick()}>\n                        {tempUnit} \n                    </button>\n                </div>       \n            </div>\n    )\n}\n\nexport default WeatherDisplay\n\n// {currentForecast.temperature.temp} + {currentForecast.temperature.unit}","import React, { Component } from 'react';\nimport SearchBar from './components/SearchBar'\nimport WeatherDisplay from './components/WeatherDisplay'\n\nclass App extends Component {\n  state = {\n    currentForecast: null,\n    tempUnit: 'C'\n  }\n\n  getWeather = async (location) => {\n    let response = await fetch('https://cors-anywhere.herokuapp.com/api.openweathermap.org/data/2.5/weather?q=' + location + '&appid=177d6d27801e937fa431c833a1fa8013', {mode: 'cors'});\n    let weather = await response.json(); \n    if (weather.cod === 200){\n      this.processWeather(weather);\n      console.log(weather)\n    } else {\n      console.log('city not found');\n    }\n    return weather\n  }\n\n  processWeather = (weather) => {\n    let currentForecast = {\n      country: weather.sys.country,\n      city: weather.name,\n      description: weather.weather[0].description,\n      temperature: Math.round(weather.main.temp - 273.15),\n      humidity: weather.main.humidity + '%',\n      wind: Math.round(weather.wind.speed * 2.237) + 'mph',\n      icon: \"http://openweathermap.org/img/wn/\" + weather.weather[0].icon + \"@2x.png\"\n    }\n    this.setState({\n      currentForecast: currentForecast\n    })\n    console.log(this.state)\n  }\n\n  tempUnitConverter = () => {\n    let currentForecast = JSON.parse(JSON.stringify(this.state.currentForecast));\n    let tempUnit = this.state.tempUnit\n\n    if (tempUnit === 'C'){\n      currentForecast.temperature = Math.round((currentForecast.temperature * 1.8) + 32); \n      tempUnit = 'F';\n    } else {\n      currentForecast.temperature = Math.round((currentForecast.temperature - 32) * 0.55555556);\n      tempUnit = 'C';\n    }\n    this.setState({\n        currentForecast: currentForecast,\n        tempUnit: tempUnit\n    }); \n  }\n\n  render(){\n    return (\n      <div className=\"App \">\n        <div className=\"nav-wrapper valign-wrapper indigo grey lighten-1\">\n          <i id=\"logo\" className=\"material-icons\">cloud_queue</i>\n          <span id=\"logo-text\" className=\"brand-logo\">Weather App</span>\n        </div>\n        <div className=\"container\">\n            <SearchBar getWeather={this.getWeather}/> \n            {\n              !this.state.currentForecast ? (\n                null \n              ) : (\n                <WeatherDisplay currentForecast={this.state.currentForecast} tempUnitConverter={this.tempUnitConverter} tempUnit={this.state.tempUnit}/> \n              ) \n            }    \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}